name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
    strategy:
      max-parallel: 1
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry/Pip downloads (fallback)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetrydl-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetrydl-${{ matrix.python-version }}-

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true

      - name: Cache poetry virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Run CI Check
        run: make ci

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build distribution and verify metadata
        if: matrix.python-version == '3.12'
        run: |
          python -m pip install --upgrade build twine
          python -m build
          python -m twine check dist/*
          python - <<'PY'
          import zipfile, tarfile, glob
          whls = sorted(glob.glob('dist/*.whl'))
          assert whls, "No wheel found in dist/"
          with zipfile.ZipFile(whls[-1]) as z:
            assert any(p.endswith('appdaemon_aegis/py.typed') for p in z.namelist()), "py.typed missing in wheel"
          print("OK: py.typed present in wheel")
          sdists = sorted(glob.glob('dist/*.tar.gz'))
          assert sdists, "No sdist found in dist/"
          with tarfile.open(sdists[-1], 'r:gz') as t:
            names = t.getnames()
            assert any(p.endswith('appdaemon_aegis/py.typed') for p in names), "py.typed missing in sdist"
          print("OK: py.typed present in sdist")
          PY
